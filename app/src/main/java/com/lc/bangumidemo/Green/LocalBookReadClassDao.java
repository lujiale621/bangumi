package com.lc.bangumidemo.Green;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCAL_BOOK_READ_CLASS".
*/
public class LocalBookReadClassDao extends AbstractDao<LocalBookReadClass, Long> {

    public static final String TABLENAME = "LOCAL_BOOK_READ_CLASS";

    /**
     * Properties of entity LocalBookReadClass.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Author = new Property(1, String.class, "author", false, "AUTHOR");
        public final static Property Bookname = new Property(2, String.class, "bookname", false, "BOOKNAME");
        public final static Property Pagecount = new Property(3, int.class, "pagecount", false, "PAGECOUNT");
        public final static Property Bookdata = new Property(4, String.class, "bookdata", false, "BOOKDATA");
        public final static Property Pageindex = new Property(5, int.class, "pageindex", false, "PAGEINDEX");
        public final static Property Contentindex = new Property(6, int.class, "contentindex", false, "CONTENTINDEX");
        public final static Property Start = new Property(7, int.class, "start", false, "START");
        public final static Property End = new Property(8, int.class, "end", false, "END");
        public final static Property Indexx = new Property(9, int.class, "indexx", false, "INDEXX");
    }


    public LocalBookReadClassDao(DaoConfig config) {
        super(config);
    }
    
    public LocalBookReadClassDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCAL_BOOK_READ_CLASS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"AUTHOR\" TEXT," + // 1: author
                "\"BOOKNAME\" TEXT," + // 2: bookname
                "\"PAGECOUNT\" INTEGER NOT NULL ," + // 3: pagecount
                "\"BOOKDATA\" TEXT," + // 4: bookdata
                "\"PAGEINDEX\" INTEGER NOT NULL ," + // 5: pageindex
                "\"CONTENTINDEX\" INTEGER NOT NULL ," + // 6: contentindex
                "\"START\" INTEGER NOT NULL ," + // 7: start
                "\"END\" INTEGER NOT NULL ," + // 8: end
                "\"INDEXX\" INTEGER NOT NULL );"); // 9: indexx
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCAL_BOOK_READ_CLASS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocalBookReadClass entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(2, author);
        }
 
        String bookname = entity.getBookname();
        if (bookname != null) {
            stmt.bindString(3, bookname);
        }
        stmt.bindLong(4, entity.getPagecount());
 
        String bookdata = entity.getBookdata();
        if (bookdata != null) {
            stmt.bindString(5, bookdata);
        }
        stmt.bindLong(6, entity.getPageindex());
        stmt.bindLong(7, entity.getContentindex());
        stmt.bindLong(8, entity.getStart());
        stmt.bindLong(9, entity.getEnd());
        stmt.bindLong(10, entity.getIndexx());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocalBookReadClass entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(2, author);
        }
 
        String bookname = entity.getBookname();
        if (bookname != null) {
            stmt.bindString(3, bookname);
        }
        stmt.bindLong(4, entity.getPagecount());
 
        String bookdata = entity.getBookdata();
        if (bookdata != null) {
            stmt.bindString(5, bookdata);
        }
        stmt.bindLong(6, entity.getPageindex());
        stmt.bindLong(7, entity.getContentindex());
        stmt.bindLong(8, entity.getStart());
        stmt.bindLong(9, entity.getEnd());
        stmt.bindLong(10, entity.getIndexx());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LocalBookReadClass readEntity(Cursor cursor, int offset) {
        LocalBookReadClass entity = new LocalBookReadClass( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // author
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bookname
            cursor.getInt(offset + 3), // pagecount
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // bookdata
            cursor.getInt(offset + 5), // pageindex
            cursor.getInt(offset + 6), // contentindex
            cursor.getInt(offset + 7), // start
            cursor.getInt(offset + 8), // end
            cursor.getInt(offset + 9) // indexx
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocalBookReadClass entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAuthor(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBookname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPagecount(cursor.getInt(offset + 3));
        entity.setBookdata(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPageindex(cursor.getInt(offset + 5));
        entity.setContentindex(cursor.getInt(offset + 6));
        entity.setStart(cursor.getInt(offset + 7));
        entity.setEnd(cursor.getInt(offset + 8));
        entity.setIndexx(cursor.getInt(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LocalBookReadClass entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LocalBookReadClass entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LocalBookReadClass entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
