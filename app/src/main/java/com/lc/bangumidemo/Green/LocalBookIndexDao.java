package com.lc.bangumidemo.Green;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCAL_BOOK_INDEX".
*/
public class LocalBookIndexDao extends AbstractDao<LocalBookIndex, Long> {

    public static final String TABLENAME = "LOCAL_BOOK_INDEX";

    /**
     * Properties of entity LocalBookIndex.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Author = new Property(1, String.class, "author", false, "AUTHOR");
        public final static Property Bookname = new Property(2, String.class, "bookname", false, "BOOKNAME");
        public final static Property Hardpageindex = new Property(3, int.class, "hardpageindex", false, "HARDPAGEINDEX");
        public final static Property Hardcontentindex = new Property(4, int.class, "hardcontentindex", false, "HARDCONTENTINDEX");
        public final static Property Pagecount = new Property(5, int.class, "pagecount", false, "PAGECOUNT");
        public final static Property Pageindex = new Property(6, int.class, "pageindex", false, "PAGEINDEX");
        public final static Property Contentindex = new Property(7, int.class, "contentindex", false, "CONTENTINDEX");
    }


    public LocalBookIndexDao(DaoConfig config) {
        super(config);
    }
    
    public LocalBookIndexDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCAL_BOOK_INDEX\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"AUTHOR\" TEXT," + // 1: author
                "\"BOOKNAME\" TEXT," + // 2: bookname
                "\"HARDPAGEINDEX\" INTEGER NOT NULL ," + // 3: hardpageindex
                "\"HARDCONTENTINDEX\" INTEGER NOT NULL ," + // 4: hardcontentindex
                "\"PAGECOUNT\" INTEGER NOT NULL ," + // 5: pagecount
                "\"PAGEINDEX\" INTEGER NOT NULL ," + // 6: pageindex
                "\"CONTENTINDEX\" INTEGER NOT NULL );"); // 7: contentindex
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCAL_BOOK_INDEX\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocalBookIndex entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(2, author);
        }
 
        String bookname = entity.getBookname();
        if (bookname != null) {
            stmt.bindString(3, bookname);
        }
        stmt.bindLong(4, entity.getHardpageindex());
        stmt.bindLong(5, entity.getHardcontentindex());
        stmt.bindLong(6, entity.getPagecount());
        stmt.bindLong(7, entity.getPageindex());
        stmt.bindLong(8, entity.getContentindex());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocalBookIndex entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(2, author);
        }
 
        String bookname = entity.getBookname();
        if (bookname != null) {
            stmt.bindString(3, bookname);
        }
        stmt.bindLong(4, entity.getHardpageindex());
        stmt.bindLong(5, entity.getHardcontentindex());
        stmt.bindLong(6, entity.getPagecount());
        stmt.bindLong(7, entity.getPageindex());
        stmt.bindLong(8, entity.getContentindex());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LocalBookIndex readEntity(Cursor cursor, int offset) {
        LocalBookIndex entity = new LocalBookIndex( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // author
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bookname
            cursor.getInt(offset + 3), // hardpageindex
            cursor.getInt(offset + 4), // hardcontentindex
            cursor.getInt(offset + 5), // pagecount
            cursor.getInt(offset + 6), // pageindex
            cursor.getInt(offset + 7) // contentindex
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocalBookIndex entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAuthor(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBookname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHardpageindex(cursor.getInt(offset + 3));
        entity.setHardcontentindex(cursor.getInt(offset + 4));
        entity.setPagecount(cursor.getInt(offset + 5));
        entity.setPageindex(cursor.getInt(offset + 6));
        entity.setContentindex(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LocalBookIndex entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LocalBookIndex entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LocalBookIndex entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
